#ifndef UART_SERIAL_H_
#define UART_SERIAL_H_


void calcChecksum_ack(unsigned char* CK);
void writeConfiguration(const unsigned char config[], long len);
bool acknowledgment();

const unsigned char UBX_HEADER[] = 
        { 0xB5, 0x62 };

const unsigned char UBX_RST[] = 
        { 0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0F,0x68};

const unsigned char UBX_VALSET_FREQ_1[] = //1Hz. BBR and RAM
        { 0xB5, 0x62, 0x06, 0x8A, 0x14, 0x00, 0x00, 0x03, 0x00, 0x00, 0x24, 0x00, 0x05, 0x40,// 
		      0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x05, 0x40, 0x01, 0x00, 0x00, 0x00, 0x7C, 0x43};

const unsigned char UBX_VALSET_FREQ_10[] = //10Hz. BBR and RAM
        { 0xB5, 0x62, 0x06, 0x8A, 0x14, 0x00, 0x00, 0x03, 0x00, 0x00, 0x24, 0x00, 0x05, 0x40,// 
		      0x0A, 0x00, 0x00, 0x00, 0x25, 0x00, 0x05, 0x40, 0x0A, 0x00, 0x00, 0x00, 0x8E, 0xD3};

const unsigned char UBX_VALSET_FREQ_100[] = //100Hz. BBR and RAM
        { 0xB5, 0x62, 0x06, 0x8A, 0x14, 0x00, 0x00, 0x03, 0x00, 0x00, 0x24, 0x00, 0x05, 0x40,// 
		      0x64, 0x00, 0x00, 0x00, 0x25, 0x00, 0x05, 0x40, 0x64, 0x00, 0x00, 0x00, 0x42, 0x73};

const unsigned char UBX_VALSET_FREQ_150[] = //150Hz, BBR and RAM
        { 0xB5, 0x62, 0x06, 0x8A, 0x14, 0x00, 0x00, 0x03, 0x00, 0x00, 0x24, 0x00, 0x05, 0x40,// 
		      0x96, 0x00, 0x00, 0x00, 0x25, 0x00, 0x05, 0x40, 0x96, 0x00, 0x00, 0x00, 0xA6, 0x93};

const unsigned char UBX_VALSET_FREQ_200[] = //200Hz, BBR and RAM
        { 0xB5, 0x62, 0x06, 0x8A, 0x14, 0x00, 0x00, 0x03, 0x00, 0x00, 0x24, 0x00, 0x05, 0x40,// 
		      0xC8, 0x00, 0x00, 0x00, 0x25, 0x00, 0x05, 0x40, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0xB3};

const unsigned char UBX_VALSET_TP_FREQ100_DUTY5[] = //100Hz, BBR and RAM
        { 0xB5, 0x62, 0x06, 0x8A, 0x36, 0x00, 0x00, 0x03, 0x00, 0x00, 0x23, 0x00,//
          0x05, 0x20, 0x01, 0x30, 0x00, 0x05, 0x20, 0x00, 0x24, 0x00, 0x05, 0x40,//
          0x64, 0x00, 0x00, 0x00, 0x25, 0x00, 0x05, 0x40, 0x64, 0x00, 0x00, 0x00,//
          0x2A, 0x00, 0x05, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40,//
          0x2B, 0x00, 0x05, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0xA9, 0xA8};

const unsigned char UBX_VALSET_TP_FREQ10_DUTY5[] = 
        { 0xB5, 0x62, 0x06, 0x8A, 0x36, 0x00, 0x00, 0x03, 0x00, 0x00, 0x23, 0x00,// 
	        0x05, 0x20, 0x01, 0x30, 0x00, 0x05, 0x20, 0x00, 0x24, 0x00, 0x05, 0x40,//
          0x0A, 0x00, 0x00, 0x00, 0x25, 0x00, 0x05, 0x40, 0x0A, 0x00, 0x00, 0x00,//
          0x2A, 0x00, 0x05, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40,//
          0x2B, 0x00, 0x05, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0xF5, 0x28};

const unsigned char UBX_VALSET_INOUTPROT[] = 
        { 0xB5, 0x62, 0x06, 0x8A, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x02, 0x00,//
          0x77, 0x10, 0x00, 0x01, 0x00, 0x78, 0x10, 0x00, 0x02, 0x00, 0x73, 0x10,//
          0x00, 0x02, 0x00, 0x74, 0x10, 0x00, 0xC8, 0x0A};


struct NAV_PVT {
  unsigned char cls;
  unsigned char id;
  unsigned short len;
  unsigned long iTOW;          // GPS time of week of the navigation epoch (ms)
  
  unsigned short year;         // Year (UTC) 
  unsigned char month;         // Month, range 1..12 (UTC)
  unsigned char day;           // Day of month, range 1..31 (UTC)
  unsigned char hour;          // Hour of day, range 0..23 (UTC)
  unsigned char min;           // Minute of hour, range 0..59 (UTC)
  unsigned char sec;           // Seconds of minute, range 0..60 (UTC)
  unsigned char valid;         // Validity Flags (see graphic below)
  unsigned long tAcc;          // Time accuracy estimate (UTC) (ns)
  long nano;                   // Fraction of second, range -1e9 .. 1e9 (UTC) (ns)
  unsigned char fixType;       // GNSSfix Type, range 0..5
  unsigned char flags;         // Fix Status Flags
  unsigned char flags2;
  unsigned char numSV;         // Number of satellites used in Nav Solution
  long lon;                    // Longitude (deg)
  long lat;                    // Latitude (deg)
  long height;                 // Height above Ellipsoid (mm)
  long hMSL;                   // Height above mean sea level (mm)
  unsigned long hAcc;          // Horizontal Accuracy Estimate (mm)
  unsigned long vAcc;          // Vertical Accuracy Estimate (mm)
  long velN;                   // NED north velocity (mm/s)
  long velE;                   // NED east velocity (mm/s)
  long velD;                   // NED down velocity (mm/s)
  long gSpeed;                 // Ground Speed (2-D) (mm/s)
  long headMot;                // Heading of motion 2-D (deg)
  unsigned long sAcc;          // Speed Accuracy Estimate
  unsigned long headAcc;       // Heading Accuracy Estimate
  unsigned short pDOP;         // Position dilution of precision
  unsigned short flags3;
  long headVeh;  
  short magDec;
  unsigned short magAcc;

  unsigned long buffer1;     // To Pass Checksum check

};


struct UBX_ACK {
  unsigned char cls;
  unsigned char id;
  unsigned short len;


  unsigned char ack_clsID;
  unsigned char ack_msgID;

  unsigned long buffer1;     // To Pass Checksum check
};




#endif
